#!/bin/sh

## Maintainer Alexander Mcmillan <linuxguy93@gmail.com>
## Dependencies: bash efibootmgr
## IMPORTANT: Make sure you have created the efistub_boot_parameters.conf configuration file in the EFISTUB_CONFIG location prior to running this script

# Operating system name
OS_NAME="Archlinux"

# Find what partition where your current root is installed
ROOT_PARTITION=`mount | grep " / " | cut -d " " -f 1`

# Get root partition UUID
ROOTPART_UUID=`lsblk $ROOT_PARTITION -o UUID | tr "\n" " " | cut -d " " -f 2`

# Get root partition filesystem type
FSTYPE_ROOTPART=`lsblk $ROOT_PARTITION -o FSTYPE | tr "\n" " " | cut -d " " -f 2`

# EFIStub configuration file
EFISTUB_CONFIG="/etc/conf.d/efistub_boot_parameters.conf"

# Boot options to be used
BOOT_OPTIONS=`cat $EFISTUB_CONFIG`

# Detect CPU manufacturer
DETECT_CPU=`cat /proc/cpuinfo | tr -d " " | head -10 | grep vendor_id | cut -d : -f 2`

# Set the boot disk variable
if [[ "${ROOT_PARTITION:0:9}" == "/dev/nvme" ]]; then
    BOOT_LOADER_DISK=${ROOT_PARTITION::-2}
else
    BOOT_LOADER_DISK=${ROOT_PARTITION::-1}
fi

create_boot_entry() {

    # Choose your kernel for the boot entry
    echo "Choose your kernel"
    echo ""
    ls /boot/vmlinuz* | sed -e "s/\/boot\/vmlinuz-//g"
    echo ""
    read -r -p "Type in the kernel you want to create a boot entry for (i.e. linux): " BOOT_LOADER_KERNEL

    # Create EFIStub boot entries
    if [[ ! -z "$BOOT_OPTIONS" ]]; then
        if [[ "$DETECT_CPU" == "AuthenticAMD" ]] && [[ -f /boot/amd-ucode.img ]]; then
            if [[ "$FSTYPE_ROOTPART" == "btrfs" ]]; then
                efibootmgr --create --disk $BOOT_LOADER_DISK --part 1 --label "${OS_NAME}_${BOOT_LOADER_KERNEL}" --loader /vmlinuz-$BOOT_LOADER_KERNEL --unicode " rootflags=subvol=@,relatime,rw rootfstype=btrfs root=UUID=$ROOTPART_UUID resume=UUID=$ROOTPART_UUID $BOOT_OPTIONS initrd=\amd-ucode.img initrd=\initramfs-$BOOT_LOADER_KERNEL.img" --verbose
            elif [[ "$FSTYPE_ROOTPART" == "ext4" ]]; then
                efibootmgr --create --disk $BOOT_LOADER_DISK --part 1 --label "${OS_NAME}_${BOOT_LOADER_KERNEL}" --loader /vmlinuz-$BOOT_LOADER_KERNEL --unicode " $BOOT_OPTIONS rw initrd=\amd-ucode.img initrd=\initramfs-$BOOT_LOADER_KERNEL.img" --verbose
            fi
        elif [[ "$DETECT_CPU" == "GenuineIntel" ]] && [[ -f /boot/intel-ucode.img ]]; then
            if [[ "$FSTYPE_ROOTPART" == "btrfs" ]]; then
                efibootmgr --create --disk $BOOT_LOADER_DISK --part 1 --label "${OS_NAME}_${BOOT_LOADER_KERNEL}" --loader /vmlinuz-$BOOT_LOADER_KERNEL --unicode " rootflags=subvol=@,relatime,rw rootfstype=btrfs root=UUID=$ROOTPART_UUID resume=UUID=$ROOTPART_UUID $BOOT_OPTIONS initrd=\intel-ucode.img initrd=\initramfs-$BOOT_LOADER_KERNEL.img" --verbose
            elif [[ "$FSTYPE_ROOTPART" == "ext4" ]]; then
                efibootmgr --create --disk $BOOT_LOADER_DISK --part 1 --label "${OS_NAME}_${BOOT_LOADER_KERNEL}" --loader /vmlinuz-$BOOT_LOADER_KERNEL --unicode " $BOOT_OPTIONS rw initrd=\intel-ucode.img initrd=\initramfs-$BOOT_LOADER_KERNEL.img" --verbose
            fi
        else
            if [[ "$FSTYPE_ROOTPART" == "btrfs" ]]; then
                efibootmgr --create --disk $BOOT_LOADER_DISK --part 1 --label "${OS_NAME}_${BOOT_LOADER_KERNEL}" --loader /vmlinuz-$BOOT_LOADER_KERNEL --unicode " rootflags=subvol=@,relatime,rw rootfstype=btrfs root=UUID=$ROOTPART_UUID resume=UUID=$ROOTPART_UUID $BOOT_OPTIONS initrd=\initramfs-$BOOT_LOADER_KERNEL.img" --verbose
            elif [[ "$FSTYPE_ROOTPART" == "ext4" ]]; then
                efibootmgr --create --disk $BOOT_LOADER_DISK --part 1 --label "${OS_NAME}_${BOOT_LOADER_KERNEL}" --loader /vmlinuz-$BOOT_LOADER_KERNEL --unicode " $BOOT_OPTIONS rw initrd=\initramfs-$BOOT_LOADER_KERNEL.img" --verbose
            fi
        fi
    else
        clear
        echo "Please create the efistub_boot_parameters.conf configuration file in the /etc/conf.d directory"
        sleep 2
    fi

}

edit_configuration() {

    ## Edit configuration file

    if [[ -f "$EFISTUB_CONFIG" ]]; then
        if [[ ! -z "$EDITOR" ]]; then
            $EDITOR $EFISTUB_CONFIG
        else
            echo "Please make sure to set the EDITOR environment variable to your choice of editor prior to running this option"
            sleep 2
        fi
    else
        echo "Please create the efistub_boot_parameters.conf configuration file in the /etc/conf.d directory"
        sleep 2
    fi

}

delete_boot_entries() {

    # Get a list of all known boot options that are available to efibootmgr
    BootArray=(`efibootmgr | grep "BootOrder" | cut -d " " -f 2 | tr "," "\n" | sort`)

    # Boot entry deletion menu
    echo "Delete boot entries"
    echo ""

    # Parse through entries and list them
    for BootNum in ${BootArray[@]};
    do
        BootEntry=(`efibootmgr | grep Boot${BootNum} | cut -d " " -f 1 | sed -e "s/\*//" | sed -e "s/Boot//"`)
        EntryName=(`efibootmgr | grep Boot${BootNum} | cut -d " " -f 2`)
        echo "$EntryName: $BootEntry"
    done

    # Boot entry deletion menu
    echo ""
    read -r -p "Choose what boot entry to delete (i.e. 0001): " delete_selection

    # Delete chosen boot entry
    if [[ ${#delete_selection} == 4 ]]; then
        if [[ ${delete_selection} =~ ^[0-9]+$  ]]; then
            efibootmgr -b $delete_selection -B
        else
            clear
            echo "Please type a number with a length of 4 characters"
            sleep 2
        fi
    else
        clear
        echo "Please type a number with a length of 4 characters"
        sleep 2
    fi

}

## Main program
if [[ "$USER" == "root" ]]; then
    while :
    do
        # Menu Choices
        clear
        echo "EFI Management Script"
        echo ""
        echo "Create: create a boot entry"
        echo "Delete: remove a boot entry"
        echo "Configure: edit the boot parameters"
        echo "Info: shows efiboot manager entries"
        echo "Exit: exit the script"
        echo ""
        read -r -p "Choose an option: " OPTION

        # Menu Logic
        if [[ "$OPTION" == "Create" ]]; then
            clear
            create_boot_entry
        elif [[ "$OPTION" == "Configure" ]]; then
            clear
            edit_configuration
        elif [[ "$OPTION" == "Delete" ]]; then
            clear
            delete_boot_entries
        elif [[ "$OPTION" == "Info" ]]; then
            clear
            efibootmgr | less
        elif [[ "$OPTION" == "Exit" ]]; then
            break
        else
            clear
        fi
    done
else
    echo "You need to be root to run this script"
fi
