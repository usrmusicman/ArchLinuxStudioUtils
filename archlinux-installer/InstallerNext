#!/bin/sh

# <<-- Globals -->>

## Start of package lists

# AMD DRIVERS
AMDGPU_DRV="lib32-libva-mesa-driver lib32-mesa lib32-ocl-icd lib32-vulkan-radeon lib32-vulkan-mesa-layers libva-mesa-driver libva-utils mesa ocl-icd rocm-hip-runtime rocm-language-runtime rocm-opencl-runtime rocminfo vulkan-radeon vulkan-mesa-layers"

# INTEL DRIVERS
INTELGPU_DRV="gst-plugin-qsv intel-compute-runtime intel-media-driver intel-oneapi-compiler-dpcpp-cpp-runtime intel-oneapi-compiler-shared-runtime lib32-mesa lib32-ocl-icd lib32-vulkan-intel lib32-vulkan-mesa-layers libva-utils mesa vpl-gpu-rt vulkan-intel vulkan-mesa-layers"

# NVIDIA DRIVERS
NVIDIAGPU_DRV="lib32-nvidia-utils lib32-opencl-nvidia lib32-primus_vk libva-nvidia-driver libva-utils nvidia-open-dkms nvidia-prime nvidia-settings nvidia-utils opencl-nvidia primus_vk"

# OTHER DRIVERS
OTHERGPU_DRV="lib32-vulkan-swrast lib32-vulkan-virtio libva-mesa-driver libva-utils mesa vulkan-swrast vulkan-virtio"

# BASE SYSTEM
BASE_SYSTEM="alsa-utils avahi bash-completion btrfs-progs dosfstools efibootmgr exfatprogs fastfetch ffmpeg firewalld git gnu-free-fonts grub i2c-tools lib32-pipewire-jack lib32-pipewire-v4l2 linux-firmware man-db man-pages mkinitcpio mtools multilib-devel net-tools networkmanager ntfs-3g pipewire-alsa pipewire-audio pipewire-ffado pipewire-jack pipewire-libcamera pipewire-pulse pipewire-session-manager pipewire-v4l2 plymouth power-profiles-daemon pulse-native-provider realtime-privileges reflector rsync rtirq sshfs sudo udisks2 udisks2-btrfs vim vim-runtime wget wireless-regdb wireplumber zram-generator"

# PLASMA DESKTOP
PLASMA_DESKTOP="appmenu-gtk-module ark bluez bluez-cups bluez-obex bluez-utils breeze5 colord cups cups-browsed cups-filters cups-pk-helper dolphin dolphin-plugins ebook-tools ffmpegthumbs firefox flatpak flatpak-xdg-utils gamemode gst-libav gst-plugin-libcamera gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-espeak gst-plugins-good gst-plugins-ugly gst-plugin-va gstreamer-vaapi gwenview hunspell-en_au hunspell-en_ca hunspell-en_gb hunspell-en_us ifuse kaccounts-integration kaccounts-providers kamera kate kcalc kdeconnect kdegraphics-mobipocket kdegraphics-thumbnailers kdenetwork-filesharing kdialog keditbookmarks kimageformats kimageformats5 kio-admin kio-extras kio-gdrive kio-zeroconf konsole kwalletmanager kwayland-integration lib32-gamemode lib32-gst-plugins-base lib32-gst-plugins-base-libs lib32-gst-plugins-good lib32-mangohud libappimage libdbusmenu-glib libdbusmenu-gtk2 libdbusmenu-gtk3 libdbusmenu-qt5 libdvdcss libgpod libportal libportal-gtk3 libportal-gtk4 libportal-qt5 libportal-qt6 maliit-keyboard mangohud multilib-devel noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra openrgb orca p7zip partitionmanager phonon-qt5-gstreamer phonon-qt5-vlc phonon-qt6-vlc plasma plasma-applet-window-buttons plasma-framework5 plasma-wayland-protocols plasma5-integration power-profiles-daemon qpwgraph qt6-imageformats qt6-multimedia-ffmpeg qt6-multimedia-gstreamer qt6-virtualkeyboard quota-tools spectacle switcheroo-control system-config-printer thunderbird unarchiver usbguard vlc xdg-desktop-portal-gtk xdg-user-dirs xdg-user-dirs-gtk yt-dlp"

## End of package lists

# <<-- Functions -->>

btrfs_configuration() {

    # Create snapper support script (remember to run as root)
    mkdir -p $MOUNT_DIR/etc/skel/Desktop
    echo "if [[ \"$USER\" == \"root\" ]]; then" > $MOUNT_DIR/etc/skel/Desktop/first_run.sh
    echo "#!/bin/sh" >> $MOUNT_DIR/etc/skel/Desktop/first_run.sh
    echo "umount -lf /.snapshots" >> $MOUNT_DIR/etc/skel/Desktop/first_run.sh
    echo "rm -rf /.snapshots" >> $MOUNT_DIR/etc/skel/Desktop/first_run.sh
    echo "btrfs subvolume delete /.snapshots" >> $MOUNT_DIR/etc/skel/Desktop/first_run.sh
    echo "pacman -Syyuu --noconfirm grub-btrfs snapper" >> $MOUNT_DIR/etc/skel/Desktop/first_run.sh
    echo "snapper -c root create-config /" >> $MOUNT_DIR/etc/skel/Desktop/first_run.sh
    echo "rm -rf /.snapshots" >> $MOUNT_DIR/etc/skel/Desktop/first_run.sh
    echo "mkdir -p /.snapshots" >> $MOUNT_DIR/etc/skel/Desktop/first_run.sh
    echo "mount -t btrfs -o rw,compress=zstd:6,relatime,subvol=@snapshots $SYSTEM_ROOT /.snapshots" >> $MOUNT_DIR/etc/skel/Desktop/first_run.sh
    echo "chmod 750 /.snapshots" >> $MOUNT_DIR/etc/skel/Desktop/first_run.sh
    echo "chown :wheel /.snapshots" >> $MOUNT_DIR/etc/skel/Desktop/first_run.sh
    echo "rm first_run.sh" >> $MOUNT_DIR/etc/skel/Desktop/first_run.sh
    echo "fi" >> $MOUNT_DIR/etc/skel/Desktop/first_run.sh

    # Make executable
    chmod 755 $MOUNT_DIR/etc/skel/Desktop/first_run.sh

}

initialize_base_system() {

    # Create bootstrap enviornment
    pacstrap $MOUNT_DIR base base-devel

    # Install pacman.conf
    install -Dm644 pacman.conf $MOUNT_DIR/etc/pacman.conf

    # Refresh package database (Chroot)
    arch-chroot $MOUNT_DIR pacman -Syy

    # Initialize pacman-keyring (chroot)
    arch-chroot $MOUNT_DIR pacman-key --init
    arch-chroot $MOUNT_DIR pacman-key --populate archlinux
    arch-chroot $MOUNT_DIR pacman-key --lsign-key archlinux

    # Generate filesystem mounts
    genfstab -U $MOUNT_DIR > $MOUNT_DIR/etc/fstab

}

initialize_chroot_environment() {

    # Enter chroot environment
    arch-chroot $MOUNT_DIR
    # Unmount Environment
    umount -lf $MOUNT_DIR

}

initialize_computer_settings() {

    # Set system-wide default system text editor
    echo "EDITOR=/usr/bin/vim" > $MOUNT_DIR/etc/enviornment

    # Create the mkinitcpio file
    echo "# Extra modules to be loaded into the initramfs" > $MOUNT_DIR/etc/mkinitcpio.conf
    echo "MODULES=()" >> $MOUNT_DIR/etc/mkinitcpio.conf
    echo "" >> $MOUNT_DIR/etc/mkinitcpio.conf
    echo "# Hooks used to configure modules" >> $MOUNT_DIR/etc/mkinitcpio.conf
    echo "HOOKS=(base udev autodetect microcode modconf kms keyboard keymap block filesystems fsck plymouth)" >> $MOUNT_DIR/etc/mkinitcpio.conf
    echo "" >> $MOUNT_DIR/etc/mkinitcpio.conf
    echo "# Compression algorithm to be used" >> $MOUNT_DIR/etc/mkinitcpio.conf
    echo "COMPRESSION=\"zstd\"" >> $MOUNT_DIR/etc/mkinitcpio.conf

    # Load i2c-dev kernel module on boot
    echo "i2c-dev" > $MOUNT_DIR/etc/modules-load.d/i2c-dev.conf

    # Zram generation configuration
    echo "[zram0]" > $MOUNT_DIR/etc/systemd/zram-generator.conf
    echo "host-memory-limit = none" >> $MOUNT_DIR/etc/systemd/zram-generator.conf
    echo "zram-size = min(ram / 2, 8192)" >> $MOUNT_DIR/etc/systemd/zram-generator.conf
    echo "compression-algorithm = zstd" >> $MOUNT_DIR/etc/systemd/zram-generator.conf
    echo "options = discard" >> $MOUNT_DIR/etc/systemd/zram-generator.conf
    echo "swap-priority = 32767" >> $MOUNT_DIR/etc/systemd/zram-generator.conf

    # Set hostname
    echo "$HOSTNAME" > $MOUNT_DIR/etc/hostname

    # Create flathub repo configuration script
    mkdir -p $MOUNT_DIR/etc/skel/Desktop
    echo "#!/bin/sh" > $MOUNT_DIR/etc/skel/Desktop/enable_flatpak_as_user.sh
    echo "flatpak remote-add --if-not-exists flathub-user https://dl.flathub.org/repo/flathub.flatpakrepo --user" >> $MOUNT_DIR/etc/skel/Desktop/enable_flatpak_as_user.sh
    echo "pkexec --user root flatpak remote-delete flathub" >> $MOUNT_DIR/etc/skel/Desktop/enable_flatpak_as_user.sh
    echo "rm $HOME/Desktop/enable_flatpak_as_user.sh" >> $MOUNT_DIR/etc/skel/Desktop/enable_flatpak_as_user.sh
    chmod 755 $MOUNT_DIR/etc/skel/Desktop/enable_flatpak_as_user.sh

    ## Pro audio/video configuration

    # Set system swappiness
    echo "vm.swappiness = 10" > $MOUNT_DIR/etc/sysctl.d/90-swappiness.conf

    # Set system maximum inotify watches
    echo "fs.inotify.max_user_watches = 600000" > $MOUNT_DIR/etc/sysctl.d/90-max_user_watches.conf

    # Set the maximum value for the RTC timer
    echo "echo 2048 > /sys/class/rtc/rtc0/max_user_freq" > $MOUNT_DIR/usr/local/bin/max_rtc_timer.sh
    echo "echo 2048 > /proc/sys/dev/hpet/max-user-freq" >> $MOUNT_DIR/usr/local/bin/max_rtc_timer.sh
    chmod 755 $MOUNT_DIR/usr/local/bin/max_rtc_timer.sh

    # Generate a start up service for the RTC timer tweak
    echo "[Unit]" > $MOUNT_DIR/etc/systemd/system/rtc_timer_tweak.service
    echo "Description=RTC Timer Tweak" >> $MOUNT_DIR/etc/systemd/system/rtc_timer_tweak.service
    echo "" >> $MOUNT_DIR/etc/systemd/system/rtc_timer_tweak.service
    echo "[Service]" >> $MOUNT_DIR/etc/systemd/system/rtc_timer_tweak.service
    echo "ExecStart=/usr/local/bin/max_rtc_timer.sh" >> $MOUNT_DIR/etc/systemd/system/rtc_timer_tweak.service
    echo "" >> $MOUNT_DIR/etc/systemd/system/rtc_timer_tweak.service
    echo "[Install]" >> $MOUNT_DIR/etc/systemd/system/rtc_timer_tweak.service
    echo "WantedBy=multi-user.target" >> $MOUNT_DIR/etc/systemd/system/rtc_timer_tweak.service
}

initialize_pacman() {

    # Refresh package database (Live environment)
    pacman -Syy

    # Install new archlinux keyring
    pacman -S --noconfirm archlinux-keyring

    # Initialize pacman-keyring
    pacman-key --init
    pacman-key --populate archlinux
    pacman-key --lsign-key archlinux

}

setup_base_system() {

    # Install Base System
    arch-chroot $MOUNT_DIR pacman -S --noconfirm $BASE_SYSTEM ${KERNEL} ${KERNEL}-headers

    # Enable system services
    arch-chroot $MOUNT_DIR systemctl enable avahi-daemon.service
    arch-chroot $MOUNT_DIR systemctl enable avahi-dnsconfd.service
    arch-chroot $MOUNT_DIR systemctl enable NetworkManager.service
    arch-chroot $MOUNT_DIR systemctl enable rtc_timer_tweak.service
    arch-chroot $MOUNT_DIR systemctl enable rtirq.service
    arch-chroot $MOUNT_DIR systemctl enable rtirq-resume.service
    arch-chroot $MOUNT_DIR systemctl enable rtkit-daemon.service

}

setup_bootloader() {

    # ESP system partition directory
    ESP_DIRECTORY="${MOUNT_DIR}/boot/efi"

    # Make ESP directory
    mkdir -p $ESP_DIRECTORY

    # Mount ESP Directory
    mount $SYSTEM_BOOT $ESP_DIRECTORY

    # System root partition UUID
    ROOT_UUID=`lsblk $SYSTEM_ROOT -o UUID | tr "\n" " " | cut -d " " -f 2`

    # Boot commandline options
    BOOT_OPTIONS="loglevel=3 quiet preempt=full threadirqs splash"

    # Setup GRUB bootloader
    arch-chroot $MOUNT_DIR grub-install --target=x86_64-efi --efi-directory="${ESP_DIRECTORY/${MOUNT_DIR}/}" --bootloader-id="${OS_NAME}" ${SYSTEM_BOOT}

    # Check partition type
    if [[ "$PARTITION_TYPE" == "btrfs" ]]; then
        # Edit GRUB default configuration file
        sed -i -e "s/GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3 quiet\"/GRUB_CMDLINE_LINUX_DEFAULT=\"rootflags=subvol=@,relatime,rw rootfstype=btrfs root=UUID=$ROOT_UUID resume=UUID=$ROOT_UUID ${BOOT_OPTIONS}\"/" $MOUNT_DIR/etc/default/grub
        # Install BTRFS GRUB Packages
        arch-chroot $MOUNT_DIR pacman -S --noconfirm grub-btrfs
        # Configure BTRFS GRUB
        arch-chroot $MOUNT_DIR systemctl enable grub-btrfsd.service
    elif [[ "$PARTITION_TYPE" == "ext4" ]]; then
        # Edit GRUB default configuration file
        sed -i -e "s/GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3 quiet\"/GRUB_CMDLINE_LINUX_DEFAULT=\"root=UUID=$ROOT_UUID resume=UUID=$ROOT_UUID ${BOOT_OPTIONS}\"/" $MOUNT_DIR/etc/default/grub
    fi

    # Create GRUB configuration file
    arch-chroot $MOUNT_DIR grub-mkconfig -o /boot/grub/grub.cfg

}

setup_cpu_microcode() {

    # Install CPU Microcode
    if [[ "${CPU}" == "amd" ]]; then
        # Install AMD CPU Firmware
        arch-chroot $MOUNT_DIR pacman -S --noconfirm amd-ucode
    elif [[ "${CPU}" == "intel" ]]; then
        # Install Intel CPU Firmware
        arch-chroot $MOUNT_DIR pacman -S --noconfirm intel-ucode
    elif [[ "${CPU}" == "other" ]]; then
        echo "No microcode needed..."
        clear
    fi

}

setup_gpu_drivers() {

    # Install the display drivers
    if [[ "${GPU}" == "amd" ]]; then
        # Install AMD GPU drivers
        arch-chroot $MOUNT_DIR pacman -S --noconfirm $AMDGPU_DRV
    elif [[ "${GPU}" == "intel" ]]; then
        # Install Intel GPU drivers
        arch-chroot $MOUNT_DIR pacman -S --noconfirm $INTELGPU_DRV
    elif [[ "${GPU}" == "nvidia" ]]; then
        # Install Nvidia GPU drivers
        arch-chroot $MOUNT_DIR pacman -S --noconfirm $NVIDIAGPU_DRV
        # Enable Nvidia related services
        arch-chroot $MOUNT_DIR systemctl enable nvidia-hibernate
        arch-chroot $MOUNT_DIR systemctl enable nvidia-persistenced
        arch-chroot $MOUNT_DIR systemctl enable nvidia-powerd.service
        arch-chroot $MOUNT_DIR systemctl enable nvidia-resume
        arch-chroot $MOUNT_DIR systemctl enable nvidia-suspend
    elif [[ "${GPU}" == "other" ]]; then
        # Install Intel GPU drivers
        arch-chroot $MOUNT_DIR pacman -S --noconfirm $OTHERGPU_DRV
    fi

}

setup_locale() {

    # Set system language
    sed -i -e "s/#${LOCALE}/${LOCALE}/" $MOUNT_DIR/etc/locale.gen
    echo "LANGUAGE=${LOCALE}:${LOCALE/_*/}" > $MOUNT_DIR/etc/locale.conf
    echo "LC_ALL=C" >> $MOUNT_DIR/etc/locale.conf
    echo "LANG=${LOCALE}.UTF-8" >> $MOUNT_DIR/etc/locale.conf
    arch-chroot $MOUNT_DIR locale-gen

    # Set timezone and correct time
    arch-chroot $MOUNT_DIR ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime

}

setup_plasma_desktop() {

    # Install Plasma Desktop
    arch-chroot $MOUNT_DIR pacman -S --noconfirm $PLASMA_DESKTOP

    # Create SDDM directory
    mkdir -p $MOUNT_DIR/etc/sddm.conf.d

    # Install SDDM configuration
    echo "[General]" > $MOUNT_DIR/etc/sddm.conf.d/kde_settings.conf
    echo "HaltCommand=/usr/bin/systemctl poweroff" >> $MOUNT_DIR/etc/sddm.conf.d/kde_settings.conf
    echo "RebootCommand=/usr/bin/systemctl reboot" >> $MOUNT_DIR/etc/sddm.conf.d/kde_settings.conf
    echo "" >> $MOUNT_DIR/etc/sddm.conf.d/kde_settings.conf
    echo "[Theme]" >> $MOUNT_DIR/etc/sddm.conf.d/kde_settings.conf
    echo "Current=breeze" >> $MOUNT_DIR/etc/sddm.conf.d/kde_settings.conf
    echo "CursorTheme=breeze_cursors" >> $MOUNT_DIR/etc/sddm.conf.d/kde_settings.conf
    echo "Font=Noto Sans,10,-1,0,50,0,0,0,0,0" >> $MOUNT_DIR/etc/sddm.conf.d/kde_settings.conf
    echo "" >> $MOUNT_DIR/etc/sddm.conf.d/kde_settings.conf
    echo "[Users]" >> $MOUNT_DIR/etc/sddm.conf.d/kde_settings.conf
    echo "MaximumUid=60513" >> $MOUNT_DIR/etc/sddm.conf.d/kde_settings.conf
    echo "MinimumUid=1000" >> $MOUNT_DIR/etc/sddm.conf.d/kde_settings.conf

    # Enable virtual keyboard module in SDDM
    echo "[General]" > $MOUNT_DIR/etc/sddm.conf.d/virtualkbd.conf
    echo "InputMethod=qtvirtualkeyboard" >> $MOUNT_DIR/etc/sddm.conf.d/virtualkbd.conf

    # Enable system services
    arch-chroot $MOUNT_DIR systemctl enable bluetooth.service
    arch-chroot $MOUNT_DIR systemctl enable cups.service
    arch-chroot $MOUNT_DIR systemctl enable cups-browsed.service
    arch-chroot $MOUNT_DIR systemctl enable power-profiles-daemon.service
    arch-chroot $MOUNT_DIR systemctl enable sddm.service

    # Add user to groups
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME flatpak
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME games

}

setup_user_account() {

    # Create the new non-root user
    arch-chroot $MOUNT_DIR useradd -m $USERNAME

    # Set password for the new user
    echo "$USERNAME:$PASSWORD" | arch-chroot $MOUNT_DIR chpasswd

    # Enable the wheel group root privileges
    sed -i -e 's/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' $MOUNT_DIR/etc/sudoers

    # Add user to groups
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME audio
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME realtime
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME rtkit
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME video
    arch-chroot $MOUNT_DIR gpasswd -a $USERNAME wheel

}

partition_boot() {

    # Create A UEFI Boot Partition
    mkfs.vfat -F32 $SYSTEM_BOOT

    # Label Boot Partition
    fatlabel $SYSTEM_BOOT ESP

}

partition_root_btrfs() {

    # Create A BTRFS root partition
    mkfs.btrfs -f $SYSTEM_ROOT

    # Label BTRFS root partition
    btrfs filesystem label $SYSTEM_ROOT "$OS_NAME"

}

partition_root_ext4() {

    # Create A BTRFS root partition
    mkfs.ext4 -f $SYSTEM_ROOT

    # Label EXT4 root partition
    e2label $SYSTEM_ROOT "$OS_NAME"

}

partition_mapping_boot() {

    # Boot partition mapping


}

partition_mapping_btrfs() {

    # Mount root filesystem
    mount -t btrfs $SYSTEM_ROOT $MOUNT_DIR

    # Create BTRFS subvolumes
    btrfs subvolume create $MOUNT_DIR/@
    btrfs subvolume create $MOUNT_DIR/@home
    btrfs subvolume create $MOUNT_DIR/@opt
    btrfs subvolume create $MOUNT_DIR/@root
    btrfs subvolume create $MOUNT_DIR/@snapshots
    btrfs subvolume create $MOUNT_DIR/@srv
    btrfs subvolume create $MOUNT_DIR/@tmp
    btrfs subvolume create $MOUNT_DIR/@var

    # Unmount root filesystem
    umount $MOUNT_DIR

    # Mount BTRFS root @ subvolume
    mount -t btrfs -o rw,compress=zstd:6,relatime,subvol=@ $SYSTEM_ROOT $MOUNT_DIR

    # Make system directories
    mkdir -p $MOUNT_DIR/.snapshots
    mkdir -p $MOUNT_DIR/home
    mkdir -p $MOUNT_DIR/opt
    mkdir -p $MOUNT_DIR/root
    mkdir -p $MOUNT_DIR/srv
    mkdir -p $MOUNT_DIR/tmp
    mkdir -p $MOUNT_DIR/var

    # Mount BTRFS subvolumes
    mount -t btrfs -o rw,compress=zstd:6,relatime,subvol=@snapshots $SYSTEM_ROOT $MOUNT_DIR/.snapshots
    mount -t btrfs -o rw,compress=zstd:6,relatime,subvol=@home $SYSTEM_ROOT $MOUNT_DIR/home
    mount -t btrfs -o rw,compress=zstd:6,relatime,subvol=@opt $SYSTEM_ROOT $MOUNT_DIR/opt
    mount -t btrfs -o rw,compress=zstd:6,relatime,subvol=@root $SYSTEM_ROOT $MOUNT_DIR/root
    mount -t btrfs -o rw,compress=zstd:6,relatime,subvol=@srv $SYSTEM_ROOT $MOUNT_DIR/srv
    mount -t btrfs -o rw,compress=zstd:6,relatime,subvol=@tmp $SYSTEM_ROOT $MOUNT_DIR/tmp
    mount -t btrfs -o rw,compress=zstd:6,relatime,subvol=@var $SYSTEM_ROOT $MOUNT_DIR/var

}

partition_mapping_ext4() {

    # Mount root filesystem
    mount -t ext4 $SYSTEM_ROOT $MOUNT_DIR

}

# <<-- Main Menu -->>

# Make sure to run the script as root
if [[ "$USER" == "root" ]]; then

    ## Choosse system install disk
    while :
    do

        clear
        echo "Choose System Install Drive..."
        echo ""
        lsblk -o PATH,SIZE,TYPE | grep "disk"
        echo ""
        read -r -p "Choose partition for the boot loader (i.e. /dev/sda1): " SYSTEM_DISK
        echo ""
        read -r -p "Is this the correct boot partition (type yes or no or exit)?: " MENU_OPTION

        # Check if you wanted this to be a boot partition
        if [[ "${MENU_OPTION}" == "yes" ]]; then
            break
        elif [[ "${MENU_OPTION}" == "no" ]]; then
            clear
        elif [[ "${MENU_OPTION}" == "exit" ]]; then
            exit
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## Set system boot partition
    while :
    do

        clear
        echo "Choose Boot Partition..."
        echo ""
        lsblk -o PATH,SIZE,TYPE $SYSTEM_DISK | grep "part"
        echo ""
        read -r -p "Choose partition for the boot loader (i.e. /dev/sda1): " SYSTEM_BOOT
        echo ""
        read -r -p "Is this the correct boot partition (type yes or no or exit)?: " MENU_OPTION

        # Check if you wanted this to be a boot partition
        if [[ "${MENU_OPTION}" == "yes" ]]; then
            break
        elif [[ "${MENU_OPTION}" == "no" ]]; then
            clear
        elif [[ "${MENU_OPTION}" == "exit" ]]; then
            exit
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## Set system root partition
    while :
    do

        clear
        echo "Choose Root Partition..."
        echo ""
        lsblk -o PATH,SIZE,TYPE $SYSTEM_DISK | grep "part"
        echo ""
        read -r -p "Choose partition for the root filesystem (i.e. /dev/sda2): " SYSTEM_ROOT
        echo ""
        read -r -p "Is this the correct root partition (type yes or no or exit)?: " MENU_OPTION

        # Check if you wanted this to be a root partition
        if [[ "${MENU_OPTION}" == "yes" ]]; then
            break
        elif [[ "${MENU_OPTION}" == "no" ]]; then
            clear
        elif [[ "${MENU_OPTION}" == "exit" ]]; then
            exit
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## Set system partition type
    while :
    do

        clear
        echo "Choose Partition Type..."
        echo ""
        read -r -p "Choose the bootloader to install (i.e. btrfs or ext4): " PARTITION_TYPE
        echo ""
        read -r -p "Is this the correct partition type (type yes or no or exit)?: " MENU_OPTION

        # Check if you wanted this to be boot loader
        if [[ "${MENU_OPTION}" == "yes" ]]; then
            # Check the partition type
            if [[ "$PARTITION_TYPE" == "btrfs" ]]; then
                break
            elif [[ "$PARTITION_TYPE" == "ext4" ]]; then
                break
            else
                echo ""
                echo "Type in a partition type"
                sleep 2
            fi
        elif [[ "${MENU_OPTION}" == "no" ]]; then
            clear
        elif [[ "${MENU_OPTION}" == "exit" ]]; then
            exit
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## Choose mountpoint
    while :
    do

        clear
        read -r -p "Choose the absoulte path for the mountpoint directory (i.e. /mnt): " MOUNT_DIR
        echo ""
        read -r -p "Is this the correct mountpoint (type yes or no or exit)?: " MENU_OPTION

        # Check if you wanted this to be your system mountpoint
        if [[ "${MENU_OPTION}" == "yes" ]]; then
            break
        elif [[ "${MENU_OPTION}" == "no" ]]; then
            clear
        elif [[ "${MENU_OPTION}" == "exit" ]]; then
            exit
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## Set user credentials
    while :
    do

        clear
        read -r -p "Type in a username: " USERNAME
        read -r -p "Type in a password: "$'' -s PASSWORD
        echo -e "\n"
        read -r -p "Are these the correct user account credentials (type yes or no or exit)?: " MENU_OPTION

        # # Check if you wanted this to be your user credentials
        if [[ "${MENU_OPTION}" == "yes" ]]; then
            break
        elif [[ "${MENU_OPTION}" == "no" ]]; then
            clear
        elif [[ "${MENU_OPTION}" == "exit" ]]; then
            exit
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## Type the system hostname
    while :
    do

        clear
        read -r -p "Type in a hostname: " HOSTNAME
        echo ""
        read -r -p "Is this the correct hostname (type yes or no or exit)?: " MENU_OPTION

        # Check if you wanted this to be your system's computer name
        if [[ "${MENU_OPTION}" == "yes" ]]; then
            break
        elif [[ "${MENU_OPTION}" == "no" ]]; then
            clear
        elif [[ "${MENU_OPTION}" == "exit" ]]; then
            exit
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## Set system locale
    while :
    do

        clear
        echo "Choose Locale..."
        sleep 2
        cat /etc/locale.gen | grep "UTF-8" | cut -d " " -f 1 | cut -d "." -f 1 | cut -d "#" -f 2 | less
        clear
        read -r -p "Type in a system locale (i.e en_US): " LOCALE
        echo ""
        read -r -p "Is this the correct system locale (type yes or no or exit)?: " MENU_OPTION

        # Check if you wanted this to be your system locale
        if [[ "${MENU_OPTION}" == "yes" ]]; then
            break
        elif [[ "${MENU_OPTION}" == "no" ]]; then
            clear
        elif [[ "${MENU_OPTION}" == "exit" ]]; then
            exit
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## Set timezone
    while :
    do

        clear
        echo "Choose Timezone..."
        sleep 2
        timedatectl list-timezones | less
        clear
        read -r -p "Type in a system timezone (i.e America/New_York): " TIMEZONE
        echo ""
        read -r -p "Is this the correct timezone (type yes or no exit)?: " MENU_OPTION

        # Check if you wanted this to be your system timezone
        if [[ "${MENU_OPTION}" == "yes" ]]; then
            break
        elif [[ "${MENU_OPTION}" == "no" ]]; then
            clear
        elif [[ "${MENU_OPTION}" == "exit" ]]; then
            exit
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## Type in a name for your operating system
    while :
    do

        clear
        read -r -p "Type in an operating system name (i.e Archlinux): " OS_NAME
        echo ""
        read -r -p "Is this the correct Operating System name (type yes or no or exit)?: " MENU_OPTION

        # Check if you wanted this to be your Operating System name
        if [[ "${MENU_OPTION}" == "yes" ]]; then
            break
        elif [[ "${MENU_OPTION}" == "no" ]]; then
            clear
        elif [[ "${MENU_OPTION}" == "exit" ]]; then
            exit
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## Type in the name for the kernel you want to use
    while :
    do

        clear
        read -r -p "Type in the kernel name you want to use (i.e linux-zen): " KERNEL
        echo ""
        read -r -p "Is this the correct linux kernel name (type yes or no or exit)?: " MENU_OPTION

        # Check if you wanted this to be your system kernel name
        if [[ "${MENU_OPTION}" == "yes" ]]; then
            break
        elif [[ "${MENU_OPTION}" == "no" ]]; then
            clear
        elif [[ "${MENU_OPTION}" == "exit" ]]; then
            exit
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## Partition system
    clear
    if [[ "$PARTITION_TYPE" == "btrfs" ]]; then
        partition_root_btrfs
        partition_mapping_btrfs
    elif [[ "$PARTITION_TYPE" == "ext4" ]]; then
        partition_root_ext4
        partition_mapping_ext4
    fi
    partition_boot
    echo ""
    echo "Partitioned System..."
    sleep 5

    ## Intialize the bootstrap environment
    clear
    initialize_pacman
    initialize_base_system
    initialize_computer_settings
    echo ""
    echo "Created Initial System..."
    sleep 5

    ## Create post install script for btrfs
    if [[ "$PARTITION_TYPE" == "btrfs" ]]; then
        clear
        btrfs_configuration
    fi

    ## CPU microcode install
    while :
    do

        clear
        read -r -p "Type in the CPU name you have in your system (Options: amd, intel, other): " CPU

        # Check if a supported CPU is available
        if [[ "${CPU}" == "amd" ]]; then
            clear
            setup_cpu_microcode
            echo ""
            echo "Installed CPU Microcode..."
            sleep 5
            break
        elif [[ "${CPU}" == "intel" ]]; then
            clear
            setup_cpu_microcode
            echo ""
            echo "Installed CPU Microcode..."
            sleep 5
            break
        elif [[ "${CPU}" == "other" ]]; then
            clear
            setup_cpu_microcode
            echo ""
            echo "Installed CPU Microcode..."
            sleep 5
            break
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## GPU driver installer
    while :
    do

        clear
        read -r -p "Type in the GPU name you have in your system (Options: amd, intel, nvidia, other, virtualbox): " GPU

        # Check if a supported GPU is available
        if [[ "${GPU}" == "amd" ]]; then
            clear
            setup_gpu_drivers
            echo ""
            echo "Installed GPU Drivers..."
            sleep 5
            break
        elif [[ "${GPU}" == "intel" ]]; then
            clear
            setup_gpu_drivers
            echo ""
            echo "Installed GPU Drivers..."
            sleep 5
            break
        elif [[ "${GPU}" == "nvidia" ]]; then
            clear
            setup_gpu_drivers
            echo ""
            echo "Installed GPU Drivers..."
            sleep 5
            break
        elif [[ "${GPU}" == "other" ]]; then
            clear
            setup_gpu_drivers
            echo ""
            echo "Installed GPU Drivers..."
            sleep 5
            break
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## Install the base system
    clear
    setup_base_system
    setup_locale
    setup_user_account
    setup_bootloader
    echo ""
    echo "Installed The Base System..."
    sleep 5

    ## Choose desktop environment
    while :
    do

        clear
        read -p "Choose a desktop environment or window manager (options: none, plasma): " DESKTOP_ENV

        # Check which desktop you want to use
        if [[ "${DESKTOP_ENV}" == "none" ]]; then
            clear
            echo ""
            echo "No Desktop Environment Installed..."
            sleep 5
        elif [[ "${DESKTOP_ENV}" == "plasma" ]]; then
            clear
            setup_plasma_desktop
            echo ""
            echo "Installed The Plasma Desktop..."
            sleep 5
            break
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

    ## Chroot environment (optional setting)
    while :
    do

        clear
        read -r -p "Do you want to chroot into the system after install (type yes or no): " CHROOT_ENV
        echo ""
        read -r -p "Is this the correct option (type yes or no)?: " MENU_OPTION

        # Check if you want to enter the chroot environment
        if [[ "${MENU_OPTION}" == "yes" ]]; then
            clear
            initialize_chroot_environment
            break
        elif [[ "${MENU_OPTION}" == "no" ]]; then
            clear
            exit
        else
            echo ""
            echo "Type in a valid option"
            sleep 2
        fi

    done

else
    echo "Please be root to run this script..."
fi
